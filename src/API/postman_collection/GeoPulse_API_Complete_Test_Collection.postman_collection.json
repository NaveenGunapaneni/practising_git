{
	"info": {
		"_postman_id": "geopulse-api-complete-tests",
		"name": "GeoPulse API - Complete Test Suite",
		"description": "Comprehensive test collection for GeoPulse API including authentication, file management, dashboard, and health checks",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "geopulse-team"
	},
	"item": [
		{
			"name": "üè† Root & System Info",
			"item": [
				{
					"name": "Root - Service Overview",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Middleware Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/middleware-info",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"middleware-info"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üè• Health Checks",
			"item": [
				{
					"name": "Basic Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has correct structure', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data).to.have.property('status', 'healthy');",
									"    pm.expect(data).to.have.property('service', 'geopulse-api');",
									"    pm.expect(data).to.have.property('timestamp');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Detailed Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has detailed health info', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data).to.have.property('status');",
									"    pm.expect(data).to.have.property('service', 'geopulse-api');",
									"    pm.expect(data).to.have.property('checks');",
									"    pm.expect(data.checks).to.have.property('database');",
									"    pm.expect(data.checks).to.have.property('file_system');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/health/detailed",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"health",
								"detailed"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "User Registration - Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique email for testing",
									"pm.environment.set('unique_email', `test_${Date.now()}@gmail.com`);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response has correct structure', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.status).to.eql('success');",
									"    pm.expect(data.data).to.have.property('user_id');",
									"    pm.expect(data.data).to.have.property('email');",
									"    pm.expect(data.data).to.have.property('organization_name');",
									"    pm.expect(data.data).to.have.property('created_at');",
									"});",
									"",
									"pm.test('Email is stored correctly', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.data.email).to.eql(pm.environment.get('unique_email'));",
									"});",
									"",
									"// Store user_id for later tests",
									"if (pm.response.code === 201) {",
									"    const data = pm.response.json();",
									"    pm.environment.set('user_id', data.data.user_id);",
									"    pm.environment.set('test_email', data.data.email);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"organization_name\": \"Test Organization\",\n    \"user_name\": \"John Doe\",\n    \"contact_phone\": \"+1-555-0123\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"SecurePassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Registration - Duplicate Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Error message for duplicate email', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.status).to.eql('error');",
									"    pm.expect(data.error_code).to.eql('E007');",
									"    pm.expect(data.message).to.include('Email already exists');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"organization_name\": \"Test Organization 2\",\n    \"user_name\": \"Jane Doe\",\n    \"contact_phone\": \"+1-555-0124\",\n    \"email\": \"{{unique_email}}\",\n    \"password\": \"AnotherPassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Registration - Invalid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 422', function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test('Validation error response', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.status).to.eql('error');",
									"    pm.expect(data.error_code).to.eql('E007');",
									"    pm.expect(data.message).to.include('Invalid input data');",
									"    pm.expect(data.details).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"organization_name\": \"\",\n    \"user_name\": \"\",\n    \"contact_phone\": \"invalid-phone\",\n    \"email\": \"invalid-email\",\n    \"password\": \"123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Login - Success (JSON)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has JWT token', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.status).to.eql('success');",
									"    pm.expect(data.data).to.have.property('access_token');",
									"    pm.expect(data.data).to.have.property('token_type', 'bearer');",
									"    pm.expect(data.data).to.have.property('expires_in', 1800);",
									"    pm.expect(data.data.user).to.have.property('user_id');",
									"    pm.expect(data.data.user).to.have.property('email');",
									"});",
									"",
									"pm.test('User email matches registered email', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.data.user.email).to.eql(pm.environment.get('test_email'));",
									"});",
									"",
									"// Store JWT token for authenticated requests",
									"if (pm.response.code === 200) {",
									"    const data = pm.response.json();",
									"    pm.environment.set('auth_token', data.data.access_token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{test_email}}\",\n    \"password\": \"SecurePassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Login - Success (Form Data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has JWT token', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.status).to.eql('success');",
									"    pm.expect(data.data).to.have.property('access_token');",
									"    pm.expect(data.data).to.have.property('token_type', 'bearer');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{test_email}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "SecurePassword123!",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Login - Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Error message for invalid credentials', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.status).to.eql('error');",
									"    pm.expect(data.error_code).to.eql('E004');",
									"    pm.expect(data.message).to.include('Invalid credentials');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{test_email}}\",\n    \"password\": \"WrongPassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìÅ File Management",
			"item": [
				{
					"name": "File Upload - Success (XLSX)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set test engagement name",
									"pm.environment.set('test_engagement', 'Test Engagement ' + Date.now());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('File upload successful', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.status).to.eql('success');",
									"    pm.expect(data.data).to.have.property('file_id');",
									"    pm.expect(data.data).to.have.property('filename');",
									"    pm.expect(data.data).to.have.property('processed_flag');",
									"    pm.expect(data.data).to.have.property('storage_location');",
									"    pm.expect(data.data).to.have.property('processing_time_seconds');",
									"    pm.expect(data.data).to.have.property('line_count');",
									"    pm.expect(data.data).to.have.property('dates');",
									"});",
									"",
									"pm.test('Processing completed successfully', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.data.processed_flag).to.be.true;",
									"    pm.expect(data.data.processing_time_seconds).to.be.a('number');",
									"    pm.expect(data.data.line_count).to.be.a('number');",
									"    pm.expect(data.data.dates).to.be.an('array');",
									"    pm.expect(data.data.dates).to.have.lengthOf(4);",
									"});",
									"",
									"// Store file_id for later tests",
									"if (pm.response.code === 200) {",
									"    const data = pm.response.json();",
									"    pm.environment.set('file_id', data.data.file_id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "sample_data.xlsx"
								},
								{
									"key": "engagement_name",
									"value": "{{test_engagement}}",
									"type": "text"
								},
								{
									"key": "date1",
									"value": "2025-08-01",
									"type": "text"
								},
								{
									"key": "date2",
									"value": "2025-08-15",
									"type": "text"
								},
								{
									"key": "date3",
									"value": "2025-08-30",
									"type": "text"
								},
								{
									"key": "date4",
									"value": "2025-09-15",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/v1/files/upload",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"files",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "File Upload - Success (CSV)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('CSV file upload successful', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.status).to.eql('success');",
									"    pm.expect(data.data).to.have.property('file_id');",
									"    pm.expect(data.data.filename).to.include('.csv');",
									"    pm.expect(data.data.processed_flag).to.be.true;",
									"    pm.expect(data.data.processing_time_seconds).to.be.a('number');",
									"    pm.expect(data.data.line_count).to.be.a('number');",
									"});",
									"",
									"// Store CSV file_id for later tests",
									"if (pm.response.code === 200) {",
									"    const data = pm.response.json();",
									"    pm.environment.set('csv_file_id', data.data.file_id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "sample_data.csv"
								},
								{
									"key": "engagement_name",
									"value": "CSV Test Engagement",
									"type": "text"
								},
								{
									"key": "date1",
									"value": "2025-07-01",
									"type": "text"
								},
								{
									"key": "date2",
									"value": "2025-07-15",
									"type": "text"
								},
								{
									"key": "date3",
									"value": "2025-07-30",
									"type": "text"
								},
								{
									"key": "date4",
									"value": "2025-08-15",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/v1/files/upload",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"files",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "File Upload - No Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Authentication error', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.detail).to.include('Not authenticated');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "sample_data.xlsx"
								},
								{
									"key": "engagement_name",
									"value": "Test Engagement",
									"type": "text"
								},
								{
									"key": "date1",
									"value": "2025-08-01",
									"type": "text"
								},
								{
									"key": "date2",
									"value": "2025-08-15",
									"type": "text"
								},
								{
									"key": "date3",
									"value": "2025-08-30",
									"type": "text"
								},
								{
									"key": "date4",
									"value": "2025-09-15",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/v1/files/upload",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"files",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "File Upload - Invalid File Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('File type validation error', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.error_code).to.eql('E001');",
									"    pm.expect(data.message).to.include('file');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "invalid_file.txt"
								},
								{
									"key": "engagement_name",
									"value": "Test Engagement",
									"type": "text"
								},
								{
									"key": "date1",
									"value": "2025-08-01",
									"type": "text"
								},
								{
									"key": "date2",
									"value": "2025-08-15",
									"type": "text"
								},
								{
									"key": "date3",
									"value": "2025-08-30",
									"type": "text"
								},
								{
									"key": "date4",
									"value": "2025-09-15",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/v1/files/upload",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"files",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "List User Files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Files list response structure', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.status).to.eql('success');",
									"    pm.expect(data.data).to.be.an('array');",
									"    pm.expect(data.message).to.include('Retrieved');",
									"});",
									"",
									"pm.test('Files contain required fields', function () {",
									"    const data = pm.response.json();",
									"    if (data.data.length > 0) {",
									"        const file = data.data[0];",
									"        pm.expect(file).to.have.property('file_id');",
									"        pm.expect(file).to.have.property('filename');",
									"        pm.expect(file).to.have.property('upload_date');",
									"        pm.expect(file).to.have.property('processed_flag');",
									"        pm.expect(file).to.have.property('engagement_name');",
									"        pm.expect(file).to.have.property('created_at');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/files/list?limit=10&offset=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"files",
								"list"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get File Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('File status response structure', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.status).to.eql('success');",
									"    pm.expect(data.data).to.have.property('file_id');",
									"    pm.expect(data.data).to.have.property('filename');",
									"    pm.expect(data.data).to.have.property('processed_flag');",
									"    pm.expect(data.data).to.have.property('processing_time_seconds');",
									"    pm.expect(data.data).to.have.property('line_count');",
									"    pm.expect(data.data).to.have.property('file_size_mb');",
									"    pm.expect(data.data).to.have.property('dates');",
									"});",
									"",
									"pm.test('File is processed', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.data.processed_flag).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/files/status/{{file_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"files",
								"status",
								"{{file_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get File Status - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('File not found error', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.error_code).to.eql('E404');",
									"    pm.expect(data.message).to.include('File not found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/files/status/99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"files",
								"status",
								"99999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Upload Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Test upload successful', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.status).to.eql('success');",
									"    pm.expect(data.data).to.have.property('user_id');",
									"    pm.expect(data.data).to.have.property('filename');",
									"    pm.expect(data.data).to.have.property('engagement_name');",
									"    pm.expect(data.message).to.eql('Test upload successful');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "sample_data.xlsx"
								},
								{
									"key": "engagement_name",
									"value": "Test Debug Engagement",
									"type": "text"
								},
								{
									"key": "date1",
									"value": "2025-08-01",
									"type": "text"
								},
								{
									"key": "date2",
									"value": "2025-08-15",
									"type": "text"
								},
								{
									"key": "date3",
									"value": "2025-08-30",
									"type": "text"
								},
								{
									"key": "date4",
									"value": "2025-09-15",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/v1/files/test-upload",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"files",
								"test-upload"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìä Dashboard",
			"item": [
				{
					"name": "Get Dashboard Data - Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Dashboard response structure', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.status).to.eql('success');",
									"    pm.expect(data.data).to.have.property('user');",
									"    pm.expect(data.data).to.have.property('files');",
									"    pm.expect(data.data).to.have.property('metrics');",
									"    pm.expect(data.data).to.have.property('pagination');",
									"});",
									"",
									"pm.test('User data is present', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.data.user).to.have.property('user_id');",
									"    pm.expect(data.data.user).to.have.property('organization_name');",
									"    pm.expect(data.data.user).to.have.property('user_name');",
									"    pm.expect(data.data.user).to.have.property('email');",
									"    pm.expect(data.data.user).to.have.property('file_count');",
									"});",
									"",
									"pm.test('Metrics are calculated', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.data.metrics).to.have.property('total_files');",
									"    pm.expect(data.data.metrics).to.have.property('processed_files');",
									"    pm.expect(data.data.metrics).to.have.property('pending_files');",
									"    pm.expect(data.data.metrics).to.have.property('total_size_mb');",
									"    pm.expect(data.data.metrics).to.have.property('avg_processing_time');",
									"});",
									"",
									"pm.test('Pagination info is present', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.data.pagination).to.have.property('limit');",
									"    pm.expect(data.data.pagination).to.have.property('offset');",
									"    pm.expect(data.data.pagination).to.have.property('total');",
									"    pm.expect(data.data.pagination).to.have.property('has_more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/dashboard",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"dashboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Dashboard Data - With Filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Filtered dashboard response', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.status).to.eql('success');",
									"    pm.expect(data.data.pagination.limit).to.eql(5);",
									"    pm.expect(data.data.pagination.offset).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/dashboard?limit=5&offset=0&sort_by=upload_date&sort_order=desc&status=all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"dashboard"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "sort_by",
									"value": "upload_date"
								},
								{
									"key": "sort_order",
									"value": "desc"
								},
								{
									"key": "status",
									"value": "all"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Dashboard Data - Processed Files Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Only processed files returned', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.status).to.eql('success');",
									"    data.data.files.forEach(file => {",
									"        pm.expect(file.processed_flag).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/dashboard?status=processed",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"dashboard"
							],
							"query": [
								{
									"key": "status",
									"value": "processed"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Dashboard Data - No Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Authentication error', function () {",
									"    const data = pm.response.json();",
									"    pm.expect(data.detail).to.include('Not authenticated');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/dashboard",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"dashboard"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}